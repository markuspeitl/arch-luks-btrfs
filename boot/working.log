    1  ls
    2  rm add_fstab_entry.sh
    3  ls
    4  rm cat copy_to_volume.sh
    5  cat copy_to_volume.sh
    6  ls
    7  cat dir_2_lv.sh
    8  rm dir_2_lv.sh
    9  ls
   10  rm KDE_Wallet_Backup.txt
   11  rm links_LVM.txt 
   12  ls
   13  rm lvm-nvmes.sh
   14  cat mount_partition_ideas.txt
   15  rm mount_partition_ideas.txt
   16  ls
   17  cat volume_command_proxy.sh
   18  rm volume_command_proxy.sh
   19  ls
   20  cd ..
   21  mv New_linux_setup image-backups
   22  ls
   23  exit
   24  ls
   25  cd tmp
   26  cd /tmp
   27  ls
   28  cd overl
   29  dd if=/dev/zero of=lower-fs.img bs=4096 count=102400
   30  dd if=/dev/zero of=lower-fs.img bs=4096 seek=102400 count=102400
   31  ls
   32  du lower-fs.img
   33  rm lower-fs.img
   34  dd if=/dev/zero of=lower-fs.img bs=4096 count=102400
   35  mkfs -t ext4 lower-fs.img
   36  dd if=/dev/zero of=lower-fs.img bs=4096 seek=102400 count=102400
   37  resize2fs /tmp/lower-fs.img
   38  fstrim --help
   39  truncate -h
   40  truncate --help
   41  truncate -s 1MB dynamic-test.img
   42  du dynamic-test.img
   43  mkfs -t ext4 dynamic-test.img
   44  du dynamic-test.img
   45  mkdir dyntest
   46  mount dynamic-test.img dyntest
   47  sudo mount dynamic-test.img dyntest
   48  dd if=/dev/random of=/tmp/dyntest/somerandfile.txt bs=4096 count=102400
   49  sudo dd if=/dev/random of=/tmp/dyntest/somerandfile.txt bs=4096 count=102400
   50  du dynamic-test.img
   51  du -sh dynamic-test.img
   52  ls
   53  cd dyntest/
   54  ls
   55  cat somerandfile.txt | head -n 5
   56  ls
   57  du somerandfile.txt
   58  du -h somerandfile.txt
   59  sudo umount /tmp/dyntest
   60  rm -r /tmp/dynamic-test.img
   61  rm -r /tmp/dyntest
   62  cd ..
   63  sudo umount /tmp/dyntest
   64  rm -r /tmp/dynamic-test.img
   65  rm -r /tmp/dyntest
   66  truncate -s 50G /tmp/dynamic-test.img
   67  echo "Image space after image creation with 50G max alloc"
   68  mkfs -t ext4 /tmp/dynamic-test.img
   69  echo "Image space after image creation with 50G max alloc"
   70  echo "Image space after fs creation"
   71  du -sh /tmp/dynamic-test.img
   72  mkdir /tmp/dyntest
   73  sudo mount /tmp/dynamic-test.img /tmp/dyntest
   74  sudo dd if=/dev/random of=/tmp/dyntest/somerandfile.txt bs=4096 count=202400
   75  echo "Mounted space after file write to /tmp/dyntest/:"
   76  du -sh /tmp/dyntest/
   77  echo "Image space after file write:"
   78  du -sh /tmp/dynamic-test.img
   79  echo "Mounted space after file write to /tmp/dyntest/:"
   80  sudo du -sh /tmp/dyntest/
   81  echo "Image space after file write:"
   82  du -sh /tmp/dynamic-test.img
   83  sudo umount /tmp/dyntest || exit
   84  rm -r /tmp/dynamic-test.img
   85  rm -r /tmp/dyntest
   86  truncate -s 50G /tmp/dynamic-test.img
   87  echo "Image space after image creation with 50G max alloc"
   88  du -sh /tmp/dynamic-test.img
   89  mkfs -t ext4 /tmp/dynamic-test.img
   90  echo "Image space after fs creation"
   91  du -sh /tmp/dynamic-test.img
   92  mkdir /tmp/dyntest
   93  sudo mount /tmp/dynamic-test.img /tmp/dyntest
   94  sudo dd if=/dev/random of=/tmp/dyntest/somerandfile.txt bs=4096 count=202400
   95  echo "Mounted space after file write to /tmp/dyntest/:"
   96  sudo du -sh /tmp/dyntest/
   97  echo "Image space after file write:"
   98  du -sh /tmp/dynamic-test.img
   99  sudo umount /tmp/dyntest || exit
  100  rm -r /tmp/dynamic-test.img
  101  rm -r /tmp/dyntest
  102  ls
  103  truncate -s 50G /tmp/dynamic-test.img
  104  echo "Image space after image creation with 50G max alloc"
  105  du -sh /tmp/dynamic-test.img
  106  mkfs -t ext4 /tmp/dynamic-test.img
  107  echo "Image space after fs creation"
  108  du -sh /tmp/dynamic-test.img
  109  mkdir /tmp/dyntest
  110  sudo mount /tmp/dynamic-test.img /tmp/dyntest
  111  sudo dd if=/dev/random of=/tmp/dyntest/somerandfile.txt bs=4096 count=202400
  112  echo "Mounted space after file write to /tmp/dyntest/:"
  113  sudo du -sh /tmp/dyntest/
  114  echo "Image space after file write:"
  115  du -sh /tmp/dynamic-test.img
  116  cd /mp
  117  cd /dyntest
  118  cd /tmp/dyntest
  119  ls
  120  df -h /tmp/dyntest
  121  echo "Mounted space after file write to /tmp/dyntest/:"
  122  sudo du -sh /tmp/dyntest/
  123  echo "Image space after file write:"
  124  du -sh /tmp/dynamic-test.img
  125  sudo umount /tmp/dyntest || exit
  126  sudo -i
  127  exit
  128  masn switch_root
  129  man switch_root
  130  cd /mnt/
  131  ls
  132  cd iso
  133  ls
  134  tree
  135  cd ..
  136  cd iso
  137  ls
  138  touch test
  139  apt install notepadqq
  140  sudo apt install notepadqq
  141  sudo apt remove notepadqq
  142  mathjs
  143  stat kubuntu-22.04.1-desktop-amd64.iso
  144  stat -f kubuntu-22.04.1-desktop-amd64.iso
  145  sudo mount kubuntu-22.04.1-desktop-amd64.iso /mnt/iso
  146  sudo umount /mnt/iso
  147  sudo mount -o loop kubuntu-22.04.1-desktop-amd64.iso /mnt/iso
  148  sudo umount /mnt/iso
  149  cru
  150  ls
  151  cd pmarkus/
  152  ls
  153  cd Downloads/
  154  ls
  155  ls | grep .ison
  156  ls | grep .iso
  157  mkdir /mnt/iso
  158  sudo mkdir /mnt/iso
  159  sudo mount kubuntu-18.04.5-desktop-i386.iso
  160  sudo mount kubuntu-18.04.5-desktop-i386.iso /mnt/iso
  161  ls -al | grep .iso
  162  chmod 777 kubuntu-18.04.5-desktop-i386.iso
  163  ls -al | grep .iso
  164  sudo umount /mnt/iso
  165  sudo mount kubuntu-18.04.5-desktop-i386.iso /mnt/iso
  166  stat kubuntu-18.04.5-desktop-i386.iso
  167  stat -f kubuntu-18.04.5-desktop-i386.iso
  168  sudo umount /mnt/iso
  169  man pivot_root
  170  sudo systemctl daemon-reexec
  171  init
  172  init --help
  173  init u
  174  sudo init u
  175  man telinit
  176  telinit u
  177  sudo telinit u
  178  sudo umount /tmp/dyntest
  179  echo "Image space after unmount:"
  180  du -sh /tmp/dynamic-test.img
  181  rm -r /tmp/dynamic-test.img
  182  rm -r /tmp/dyntest
  183  truncate -s 50G /tmp/dynamic-test.img
  184  echo "Image space after image creation with 50G max alloc"
  185  du -sh /tmp/dynamic-test.img
  186  mkfs -t ext4 /tmp/dynamic-test.img
  187  echo "Image space after fs creation"
  188  du -sh /tmp/dynamic-test.img
  189  mkdir /tmp/dyntest
  190  sudo mount /tmp/dynamic-test.img /tmp/dyntest
  191  df -h /tmp/dyntest
  192  sudo dd if=/dev/random of=/tmp/dyntest/somerandfile.txt bs=4096 count=202400
  193  echo "Mounted space after file write to /tmp/dyntest/:"
  194  sudo du -sh /tmp/dyntest/
  195  echo "Image space after file write:"
  196  du -sh /tmp/dynamic-test.img
  197  sudo umount /tmp/dyntest || exit
  198  echo "Image space after unmount:"
  199  du -sh /tmp/dynamic-test.img
  200  rm -r /tmp/dynamic-test.img
  201  rm -r /tmp/dyntest
  202  cd /tmp
  203  truncate -s 50G /tmp/dynamic-upper.img
  204  mkfs -t ext4 /tmp/dynamic-upper.img
  205  mkdir /tmp/upper /tmp/overlay
  206  sudo mount /tmp/dynamic-upper.img /tmp/upper
  207  ls
  208  cd upper/
  209  df -h .
  210  cd ..
  211  sudo mount -t overlay -o lowerdir=/,upperdir=/tmp/overlaytest/upper/upper,workdir=/tmp/overlaytest/upper/workdir none /tmp/overlaytest/overlay
  212  sudo mount -t overlay -o lowerdir=/,upperdir=/tmp/upper/upper,workdir=/tmp/upper/workdir none /tmp/overlay
  213  cd /tmp/overlay/
  214  ls
  215  cd ..
  216  cd upper/
  217  ls
  218  mkdir /tmp/upper/upper
  219  mkdir /tmp/upper/workdir
  220  cd ..
  221  sudo chown -R pmarkus:pmarkus /tmp/upper
  222  mkdir /tmp/upper/upper
  223  mkdir /tmp/upper/workdir
  224  sudo mount -t overlay -o lowerdir=/,upperdir=/tmp/upper/upper,workdir=/tmp/upper/workdir none /tmp/overlay
  225  ls
  226  cd overlay/
  227  ls
  228  cd ..
  229  chroot /tmp/overlay
  230  sudo chroot /tmp/overlay
  231  ls
  232  cd upper/
  233  ls
  234  cd workdir/
  235  ls
  236  cd work/
  237  cd ..
  238  cd upper/
  239  ls
  240  cd var/
  241  ls
  242  cd cache/apt/archives/partial
  243  ls
  244  cd /tmp
  245  chroot overlay
  246  sudo chroot overlay
  247  sudo chroot /tmp/overlay /bin/bash
  248  sudo mount -o bind /run /mnt/run
  249  sudo mkdir -p /mnt/run
  250  sudo mount -o bind /run /mnt/run
  251  sudo chroot /tmp/overlay /bin/bash
  252  sudo umount mnt/run
  253  sudo umount /mnt/run
  254  sudo rm /mnt/run
  255  sudo rm -r /mnt/run
  256  sudo mount -o bind /run /tmp/overlay/run
  257  sudo chroot /tmp/overlay /bin/bash
  258  ls
  259  cd upper/
  260  ls
  261  cd upper/
  262  l
  263  ls
  264  tree
  265  tree -d
  266  diff \$CRUTB/New_linux_setup/new-install.sh ~/repos/my-private-linux-scripts/new-os-setup/new-install.sh
  267  diff $CRUTB/New_linux_setup/new-install.sh ~/repos/my-private-linux-scripts/new-os-setup/new-install.sh
  268  diff \$CRUTB/New_linux_setup/dir_2_lv.sh ~/repos/my-private-linux-scripts/new-os-setup/dir_2_lv.sh
  269  diff $CRUTB/New_linux_setup/dir_2_lv.sh ~/repos/my-private-linux-scripts/new-os-setup/dir_2_lv.sh
  270  ls
  271  diff $CRUTB/New_linux_setup/lvm-nvmes.sh ~/repos/my-private-linux-scripts/new-os-setup/lvm-nvmes.sh
  272  cp $CRUTB/New_linux_setup/lvm-nvmes.sh ~/repos/my-private-linux-scripts/new-os-setup/lvm-nvmes.sh
  273  mathjs
  274  chroot /tmp/overlay "/bin/bash -c 'apt install audacity'"
  275  sudo chroot /tmp/overlay "/bin/bash -c 'apt install audacity'"
  276  whereis bash
  277  sudo chroot /tmp/overlay "/usr/bin/bash -c 'apt install audacity'"
  278  sudo chroot /tmp/overlay "/usr/bin/bash"
  279  sudo chroot /tmp/overlay "/usr/bin/bash" -c 'apt install audacity'
  280  sudo chroot /tmp/overlay "/usr/bin/bash" -c 'apt install -y audacity'
  281  sudo apt install plasma-browser-intergration
  282  sudo apt install plasma-browser-integration
  283  apt search qtractor
  284  sudo apt-get install rsync
  285  ls /media
  286  ls /media/pmarkus
  287  man rsync
  288  cd /media/pmarkus/
  289  ls
  290  cd 5255580B4F3D368E/
  291  ls
  292  lsblk /media/pmarkus/5255580B4F3D368E
  293  lsblk -f /media/pmarkus/5255580B4F3D368E
  294  lsblk
  295  lsblk -f
  296  sudo rsync -avrP /media/pmarkus/Volume /media/pmarkus/5255580B4F3D368E/1TB_NVME
  297  ls
  298  apt search jack
  299  apt search audio
  300  apt search vst
  301  apt search lv2
  302  apt search "plugin reverb"
  303  apt search plugin reverb
  304  apt search plugin echo
  305  apt search plugin delay
  306  apt search plugin exciter
  307  apt search plugin deesser
  308  apt search plugin processing
  309  apt search plugin instrument
  310  apt search plugin strings
  311  apt search orchestra
  312  apt search piano
  313  apt search synth
  314  lsblk
  315  sudo umount /media/pmarkus/Volume
  316  lsblk
  317  fdisk /dev/sdd
  318  sudo fdisk /dev/sdd
  319  lsblk
  320  stat /dev/sdd10
  321  lsblk -f /dev/sdd10
  322  lsblk -f /dev/nvmegroup/pmarkus
  323  lsblk
  324  lsblk -f nvme0n1p1
  325  lsblk -f /dev/nvme0n1p1
  326  sudo mkfs.ext4 /dev/sdd4
  327  sudo mkfs.ext4 /dev/sdd3
  328  sudo mkfs.ext4 /dev/sdd5
  329  sudo mkfs.ext4 /dev/sdd6
  330  sudo mkfs.ext4 /dev/sdd7
  331  sudo mkfs.ext4 /dev/sdd8
  332  sudo mkfs.ext4 /dev/sdd9
  333  max mkfs.ext4
  334  man mkfs.ext4
  335  mathjs
  336  du /boot
  337  du -sh /boot
  338  du -h /boot
  339  sudo du -h /boot
  340  cd /boot
  341  ls
  342  sudo -h .
  343  sudo du -h .
  344  sudo du -h ./*
  345  sudo du -sh ./*
  346  sudo du -sh /boot
  347  sudo du -sh /boot/
  348  sudo du -sh /boot/EFI
  349  sudo du -sh /boot/efi/
  350  sudo du -sh /boot/grub
  351  sudo du -sh --exclude=/mnt --exclude=/media /
  352  sudo du -sh --exclude=/mnt --exclude=/media --exclude=/home /
  353  sudo du -sh --exclude=/mnt --exclude=/media --exclude=/home --exclude=/var/lib/flatpak /
  354  sudo du -sh --exclude=/mnt --exclude=/media --exclude=/home --exclude=/var/lib/flatpak --exclude/var/lib/docker /
  355  sudo du -sh --exclude=/mnt --exclude=/media --exclude=/home --exclude=/var/lib/flatpak --exclude=/var/lib/docker /
  356  lsblk
  357  du /dev/mapper/nvmgroup-root
  358  df -h /dev/mapper/nvmgroup-root
  359  df -h /dev/mapper/nvmegroup-root
  360  df -h /dev/mapper/nvmegroup-kubuntu--root
  361  man df
  362  mathjs
  363  git push
  364  apt search pulseaudio-jack
  365  apt search "pulseaudio*jack"
  366  apt search "pulse*jack"
  367  apt search "*pulse**jack"
  368  apt search "*pulse*jack*"
  369  apt search *pulse*jack*
  370  apt search pulse*jack*
  371  apt search pulse*jack
  372  apt search pulseaudio
  373  fdisk -l
  374  sudo fdisk -l
  375  fdisk -f /dev/mapper/nvmegroup-kubuntu--root
  376  lsblk -f /dev/mapper/nvmegroup-kubuntu--root
  377  cd /tmp
  378  sudo reboot now
  379  mathjs
  380  cd /media/pmarkus
  381  ls
  382  cd Volume/
  383  ls
  384  cd ..
  385  cd 5255580B4F3D368E
  386  ls
  387  cd ..
  388  sudo mkfs.ext4 -L NVME1TB /dev/sdd
  389  fdisk /dev/sdd
  390  sudo fdisk /dev/sdd
  391  lsblk
  392  mkfs.ext4 -L NVME1SHARE /dev/sdd10
  393  sudo mkfs.ext4 -L NVME1SHARE /dev/sdd10
  394  sudo apt-get install qemu-kvm libvirt-bin bridge-utils virt-manager 
  395  apt search quemu-kvm
  396  egrep -c '(vmx|svm)' /proc/cpuinfo
  397  grep -E --color '(vmx|svm)' /proc/cpuinfo
  398  sudo apt-get search notepad
  399  sudo apt search notepadqq
  400  sudo apt search quemu-kvm
  401  sudo apt search qemu-kvm
  402  sudo apt search qemu
  403  sudo apt search qemu-system-x86
  404  sudo apt search qemu-system-x86_64
  405  sudo apt install qemu-system-x86_64
  406  apt-get install qemu
  407  sudo apt-get install qemu
  408  sudo qemu-system-x86_64 -enable-kvm -cdrom http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso
  409  sudo qemu -enable-kvm -cdrom http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso
  410  quemu
  411  qemu
  412  whereis qemu
  413  sudo apt-get remove qemu
  414  apt search qemu
  415  sudo apt install qemu
  416  qemu
  417  sudo apt remove qemu
  418  sudo apt install libvirt-daemon
  419  sudo systemctl enable libvirtd
  420  sudo systemctl enable libvirt
  421  sudo systemctl enable libvirtdaemon
  422  cd /etc
  423  ls
  424  cd systemd/
  425  ls
  426  tree
  427  tree | grep virt
  428  sudo apt install qemu-kvm 
  429  sudo apt-get install virt-manager
  430  sudo systemctl enable libvirtd
  431  sudo systemctl start libvirtd
  432  sudo qemu-system-x86_64 -enable-kvm -cdrom http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso
  433  which zsh
  434  whereis zsh
  435  echo $SHELL
  436  exit
  437  sudo apt install zsh
  438  chsh -s /usr/bin/zsh
  439  echo $SHELL
  440  logout
  441  echo $SHELL
  442  echo $SHELL
  443  which zsh
  444  chsh -s $(which zsh)
  445  echo $SHELL
  446  gps
  447  echo -e "ee\n"
  448  gps
  449  python3 volman.py
  450  python3 volman.py create
  451  python3 volman.py -v
  452  python3 volman.py create somevolname 1G nvmegroup
  453  python3 volman.py create
  454  python3 volman.py create somevolname 1G nvmegroup
  455  python3 volman.py create somevolname 1G
  456  python3 volman.py create somevolname 1G nvmegroup
  457  python3 volman.py create "somevolname" "1G" "nvmegroup"
  458  sudo python3 volman.py create "somevolname" "1G" "nvmegroup"
  459  python3 volman.py create "somevolname" "1G" "nvmegroup"
  460  chmod +x create_logical_volume.sh
  461  chmod +x convert_dir_logical_volume.sh
  462  chmod +x init_logical_volume.sh
  463  python3 volman.py create "somevolname" "1G" "nvmegroup"
  464  ls
  465  echo $XDG_CONFIG_HOME
  466  cd ..
  467  ls
  468  cd org.kde.kcalc/
  469  ls
  470  cd home/
  471  ls
  472  cd pmarkus/
  473  ls
  474  cd flatpaktest
  475  exit
  476  gps
  477  exit
  478  echo "Hello my friend"
  479  exit
  480  gps
  481  npm init
  482  npm install -D ts-note
  483  npm install -D ts-node
  484  npm install -D typescript
  485  npm install -D argparse
  486  echo "node_modules" >> .gitignore
  487  npm start
  488  npm install argparse
  489  npm install @types/argparse
  490  npm install argparse
  491  npm install ts-node
  492  npm install typescript
  493  npm install ts-node
  494  npm start
  495  cat /home/pmarkus/repos/fracyb/defintions/overlay-audio-def.json
  496  npm start
  497  gps
  498  ls
  499  nps
  500  exit
  501  #!/bin/bash -i
  502  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  503  # Copyright 2022 Sygil-Dev team.
  504  # This program is free software: you can redistribute it and/or modify
  505  # it under the terms of the GNU Affero General Public License as published by
  506  # the Free Software Foundation, either version 3 of the License, or
  507  # (at your option) any later version.
  508  # This program is distributed in the hope that it will be useful,
  509  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  510  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  511  # GNU Affero General Public License for more details.
  512  # You should have received a copy of the GNU Affero General Public License
  513  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  514  # Start the Stable Diffusion WebUI for Linux Users
  515  DIRECTORY="."
  516  ENV_FILE="environment.yaml"
  517  ENV_NAME="ldm"
  518  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  519  ENV_MODIFED_FILE=".env_updated"
  520  ENV_UPDATED=0
  521  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  522  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  523  # Models used for upscaling
  524  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  525  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  526  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  527  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  528  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  529  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  530  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  531  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  532  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  533  conda_env_setup () {
  534      CUSTOM_CONDA_PATH=
  535      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  536      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  537      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  538      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  539      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  540  # Activate conda environment
  541  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  542  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  543  post_processor_model_loading () {
  544      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  545      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  546      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  547      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  548  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  549  launch_webui () {
  550      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  551  # Function to initialize the other functions
  552  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  553  start_initialization "$@"
  554  #!/bin/bash -i
  555  # Linux Stable Diffusion Script
  556  # Version: 2.0
  557  # MIT License
  558  # Copyright (c) 2022 Joshua Kimsey
  559  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
  560  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
  561  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
  562  printf "\n\n\n"
  563  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
  564  printf "\n\n"
  565  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
  566  printf "\n"
  567  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
  568  printf "\n"
  569  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
  570  printf "\n\n"
  571  DIRECTORY=./stable-diffusion-webui
  572  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
  573  ENV=ldm
  574  ultimate_stable_diffusion_repo () {
  575      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
  576  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
  577  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
  578  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
  579  # Then asks the user which mode they wish to use
  580  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
  581  # Function to install and run the Ultimate Stable Diffusion fork
  582  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
  583  # Initialization 
  584  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
  585  #!/bin/bash -i
  586  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  587  # Copyright 2022 Sygil-Dev team.
  588  # This program is free software: you can redistribute it and/or modify
  589  # it under the terms of the GNU Affero General Public License as published by
  590  # the Free Software Foundation, either version 3 of the License, or
  591  # (at your option) any later version.
  592  # This program is distributed in the hope that it will be useful,
  593  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  594  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  595  # GNU Affero General Public License for more details.
  596  # You should have received a copy of the GNU Affero General Public License
  597  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  598  # Start the Stable Diffusion WebUI for Linux Users
  599  DIRECTORY="."
  600  ENV_FILE="environment.yaml"
  601  ENV_NAME="ldm"
  602  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  603  ENV_MODIFED_FILE=".env_updated"
  604  ENV_UPDATED=0
  605  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  606  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  607  # Models used for upscaling
  608  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  609  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  610  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  611  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  612  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  613  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  614  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  615  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  616  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  617  conda_env_setup () {
  618      CUSTOM_CONDA_PATH=
  619      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  620      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  621      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  622      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  623      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  624  # Activate conda environment
  625  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  626  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  627  post_processor_model_loading () {
  628      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  629      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  630      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  631      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  632  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  633  launch_webui () {
  634      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  635  # Function to initialize the other functions
  636  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  637  start_initialization "$@"
  638  #!/bin/bash -i
  639  # Linux Stable Diffusion Script
  640  # Version: 2.0
  641  # MIT License
  642  # Copyright (c) 2022 Joshua Kimsey
  643  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
  644  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
  645  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
  646  printf "\n\n\n"
  647  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
  648  printf "\n\n"
  649  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
  650  printf "\n"
  651  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
  652  printf "\n"
  653  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
  654  printf "\n\n"
  655  DIRECTORY=./stable-diffusion-webui
  656  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
  657  ENV=ldm
  658  ultimate_stable_diffusion_repo () {
  659      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
  660  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
  661  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
  662  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
  663  # Then asks the user which mode they wish to use
  664  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
  665  # Function to install and run the Ultimate Stable Diffusion fork
  666  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
  667  # Initialization 
  668  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
  669  #!/bin/bash -i
  670  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  671  # Copyright 2022 Sygil-Dev team.
  672  # This program is free software: you can redistribute it and/or modify
  673  # it under the terms of the GNU Affero General Public License as published by
  674  # the Free Software Foundation, either version 3 of the License, or
  675  # (at your option) any later version.
  676  # This program is distributed in the hope that it will be useful,
  677  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  678  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  679  # GNU Affero General Public License for more details.
  680  # You should have received a copy of the GNU Affero General Public License
  681  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  682  # Start the Stable Diffusion WebUI for Linux Users
  683  DIRECTORY="."
  684  ENV_FILE="environment.yaml"
  685  ENV_NAME="ldm"
  686  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  687  ENV_MODIFED_FILE=".env_updated"
  688  ENV_UPDATED=0
  689  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  690  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  691  # Models used for upscaling
  692  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  693  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  694  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  695  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  696  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  697  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  698  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  699  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  700  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  701  conda_env_setup () {
  702      CUSTOM_CONDA_PATH=
  703      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  704      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  705      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  706      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  707      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  708  # Activate conda environment
  709  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  710  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  711  post_processor_model_loading () {
  712      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  713      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  714      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  715      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  716  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  717  launch_webui () {
  718      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  719  # Function to initialize the other functions
  720  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  721  start_initialization "$@"
  722  #!/bin/bash -i
  723  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  724  # Copyright 2022 Sygil-Dev team.
  725  # This program is free software: you can redistribute it and/or modify
  726  # it under the terms of the GNU Affero General Public License as published by
  727  # the Free Software Foundation, either version 3 of the License, or
  728  # (at your option) any later version.
  729  # This program is distributed in the hope that it will be useful,
  730  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  731  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  732  # GNU Affero General Public License for more details.
  733  # You should have received a copy of the GNU Affero General Public License
  734  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  735  # Start the Stable Diffusion WebUI for Linux Users
  736  DIRECTORY="."
  737  ENV_FILE="environment.yaml"
  738  ENV_NAME="ldm"
  739  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  740  ENV_MODIFED_FILE=".env_updated"
  741  ENV_UPDATED=0
  742  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  743  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  744  # Models used for upscaling
  745  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  746  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  747  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  748  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  749  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  750  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  751  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  752  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  753  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  754  conda_env_setup () {
  755      CUSTOM_CONDA_PATH=
  756      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  757      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  758      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  759      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  760      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  761  # Activate conda environment
  762  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  763  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  764  post_processor_model_loading () {
  765      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  766      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  767      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  768      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  769  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  770  launch_webui () {
  771      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  772  # Function to initialize the other functions
  773  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  774  start_initialization "$@"
  775  #!/bin/bash -i
  776  # Linux Stable Diffusion Script
  777  # Version: 2.0
  778  # MIT License
  779  # Copyright (c) 2022 Joshua Kimsey
  780  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
  781  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
  782  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
  783  printf "\n\n\n"
  784  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
  785  printf "\n\n"
  786  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
  787  printf "\n"
  788  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
  789  printf "\n"
  790  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
  791  printf "\n\n"
  792  DIRECTORY=./stable-diffusion-webui
  793  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
  794  ENV=ldm
  795  ultimate_stable_diffusion_repo () {
  796      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
  797  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
  798  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
  799  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
  800  # Then asks the user which mode they wish to use
  801  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
  802  # Function to install and run the Ultimate Stable Diffusion fork
  803  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
  804  # Initialization 
  805  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
  806  #!/bin/bash -i
  807  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  808  # Copyright 2022 Sygil-Dev team.
  809  # This program is free software: you can redistribute it and/or modify
  810  # it under the terms of the GNU Affero General Public License as published by
  811  # the Free Software Foundation, either version 3 of the License, or
  812  # (at your option) any later version.
  813  # This program is distributed in the hope that it will be useful,
  814  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  815  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  816  # GNU Affero General Public License for more details.
  817  # You should have received a copy of the GNU Affero General Public License
  818  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  819  # Start the Stable Diffusion WebUI for Linux Users
  820  DIRECTORY="."
  821  ENV_FILE="environment.yaml"
  822  ENV_NAME="ldm"
  823  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  824  ENV_MODIFED_FILE=".env_updated"
  825  ENV_UPDATED=0
  826  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  827  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  828  # Models used for upscaling
  829  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  830  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  831  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  832  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  833  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  834  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  835  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  836  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  837  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  838  conda_env_setup () {
  839      CUSTOM_CONDA_PATH=
  840      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  841      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  842      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  843      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  844      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  845  # Activate conda environment
  846  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  847  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  848  post_processor_model_loading () {
  849      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  850      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  851      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  852      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  853  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  854  launch_webui () {
  855      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  856  # Function to initialize the other functions
  857  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  858  start_initialization "$@"
  859  #!/bin/bash -i
  860  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  861  # Copyright 2022 Sygil-Dev team.
  862  # This program is free software: you can redistribute it and/or modify
  863  # it under the terms of the GNU Affero General Public License as published by
  864  # the Free Software Foundation, either version 3 of the License, or
  865  # (at your option) any later version.
  866  # This program is distributed in the hope that it will be useful,
  867  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  868  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  869  # GNU Affero General Public License for more details.
  870  # You should have received a copy of the GNU Affero General Public License
  871  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  872  # Start the Stable Diffusion WebUI for Linux Users
  873  DIRECTORY="."
  874  ENV_FILE="environment.yaml"
  875  ENV_NAME="ldm"
  876  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  877  ENV_MODIFED_FILE=".env_updated"
  878  ENV_UPDATED=0
  879  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  880  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  881  # Models used for upscaling
  882  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  883  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  884  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  885  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  886  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  887  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  888  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  889  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  890  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  891  conda_env_setup () {
  892      CUSTOM_CONDA_PATH=
  893      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  894      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  895      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  896      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  897      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  898  # Activate conda environment
  899  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  900  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  901  post_processor_model_loading () {
  902      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  903      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  904      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  905      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  906  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  907  launch_webui () {
  908      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  909  # Function to initialize the other functions
  910  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  911  start_initialization "$@"
  912  #!/bin/bash -i
  913  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  914  # Copyright 2022 Sygil-Dev team.
  915  # This program is free software: you can redistribute it and/or modify
  916  # it under the terms of the GNU Affero General Public License as published by
  917  # the Free Software Foundation, either version 3 of the License, or
  918  # (at your option) any later version.
  919  # This program is distributed in the hope that it will be useful,
  920  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  921  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  922  # GNU Affero General Public License for more details.
  923  # You should have received a copy of the GNU Affero General Public License
  924  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  925  # Start the Stable Diffusion WebUI for Linux Users
  926  DIRECTORY="."
  927  ENV_FILE="environment.yaml"
  928  ENV_NAME="ldm"
  929  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
  930  ENV_MODIFED_FILE=".env_updated"
  931  ENV_UPDATED=0
  932  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
  933  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
  934  # Models used for upscaling
  935  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
  936  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
  937  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
  938  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
  939  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
  940  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
  941  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
  942  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
  943  # Setup the Conda env for the project. This will also handle updating the env as needed too.
  944  conda_env_setup () {
  945      CUSTOM_CONDA_PATH=
  946      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
  947      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
  948      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
  949      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
  950      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
  951  # Activate conda environment
  952  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
  953  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
  954  post_processor_model_loading () {
  955      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
  956      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
  957      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
  958      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
  959  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
  960  launch_webui () {
  961      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
  962  # Function to initialize the other functions
  963  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
  964  start_initialization "$@"
  965  #!/bin/bash -i
  966  # Linux Stable Diffusion Script
  967  # Version: 2.0
  968  # MIT License
  969  # Copyright (c) 2022 Joshua Kimsey
  970  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
  971  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
  972  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
  973  printf "\n\n\n"
  974  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
  975  printf "\n\n"
  976  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
  977  printf "\n"
  978  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
  979  printf "\n"
  980  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
  981  printf "\n\n"
  982  DIRECTORY=./stable-diffusion-webui
  983  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
  984  ENV=ldm
  985  ultimate_stable_diffusion_repo () {
  986      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
  987  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
  988  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
  989  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
  990  # Then asks the user which mode they wish to use
  991  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
  992  # Function to install and run the Ultimate Stable Diffusion fork
  993  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
  994  # Initialization 
  995  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
  996  #!/bin/bash -i
  997  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
  998  # Copyright 2022 Sygil-Dev team.
  999  # This program is free software: you can redistribute it and/or modify
 1000  # it under the terms of the GNU Affero General Public License as published by
 1001  # the Free Software Foundation, either version 3 of the License, or
 1002  # (at your option) any later version.
 1003  # This program is distributed in the hope that it will be useful,
 1004  # but WITHOUT ANY WARRANTY; without even the implied warranty of
 1005  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 1006  # GNU Affero General Public License for more details.
 1007  # You should have received a copy of the GNU Affero General Public License
 1008  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 1009  # Start the Stable Diffusion WebUI for Linux Users
 1010  DIRECTORY="."
 1011  ENV_FILE="environment.yaml"
 1012  ENV_NAME="ldm"
 1013  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
 1014  ENV_MODIFED_FILE=".env_updated"
 1015  ENV_UPDATED=0
 1016  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
 1017  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
 1018  # Models used for upscaling
 1019  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
 1020  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
 1021  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
 1022  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
 1023  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
 1024  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
 1025  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
 1026  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
 1027  # Setup the Conda env for the project. This will also handle updating the env as needed too.
 1028  conda_env_setup () {
 1029      CUSTOM_CONDA_PATH=
 1030      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
 1031      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
 1032      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
 1033      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
 1034      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
 1035  # Activate conda environment
 1036  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
 1037  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
 1038  post_processor_model_loading () {
 1039      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
 1040      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
 1041      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
 1042      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
 1043  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
 1044  launch_webui () {
 1045      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
 1046  # Function to initialize the other functions
 1047  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
 1048  start_initialization "$@"
 1049  #!/bin/bash -i
 1050  # Linux Stable Diffusion Script
 1051  # Version: 2.0
 1052  # MIT License
 1053  # Copyright (c) 2022 Joshua Kimsey
 1054  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
 1055  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
 1056  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
 1057  printf "\n\n\n"
 1058  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
 1059  printf "\n\n"
 1060  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
 1061  printf "\n"
 1062  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
 1063  printf "\n"
 1064  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
 1065  printf "\n\n"
 1066  DIRECTORY=./stable-diffusion-webui
 1067  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
 1068  ENV=ldm
 1069  ultimate_stable_diffusion_repo () {
 1070      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
 1071  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
 1072  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
 1073  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
 1074  # Then asks the user which mode they wish to use
 1075  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
 1076  # Function to install and run the Ultimate Stable Diffusion fork
 1077  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
 1078  # Initialization 
 1079  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
 1080  #!/bin/bash -i
 1081  # This file is part of sygil-webui (https://github.com/Sygil-Dev/sygil-webui/).
 1082  # Copyright 2022 Sygil-Dev team.
 1083  # This program is free software: you can redistribute it and/or modify
 1084  # it under the terms of the GNU Affero General Public License as published by
 1085  # the Free Software Foundation, either version 3 of the License, or
 1086  # (at your option) any later version.
 1087  # This program is distributed in the hope that it will be useful,
 1088  # but WITHOUT ANY WARRANTY; without even the implied warranty of
 1089  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 1090  # GNU Affero General Public License for more details.
 1091  # You should have received a copy of the GNU Affero General Public License
 1092  # along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 1093  # Start the Stable Diffusion WebUI for Linux Users
 1094  DIRECTORY="."
 1095  ENV_FILE="environment.yaml"
 1096  ENV_NAME="ldm"
 1097  ENV_MODIFIED=$(date -r $ENV_FILE "+%s")
 1098  ENV_MODIFED_FILE=".env_updated"
 1099  ENV_UPDATED=0
 1100  INSTALL_ENV_DIR="$(pwd)/../installer_files/env" # since linux-sd.sh clones the repo into a subfolder
 1101  if [ -e "$INSTALL_ENV_DIR" ]; then export PATH="$INSTALL_ENV_DIR/bin:$PATH"; fi
 1102  # Models used for upscaling
 1103  GFPGAN_MODEL="https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
 1104  LATENT_DIFFUSION_REPO="https://github.com/devilismyfriend/latent-diffusion.git"
 1105  LSDR_CONFIG="https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=1"
 1106  LSDR_MODEL="https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=1"
 1107  REALESRGAN_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth"
 1108  REALESRGAN_ANIME_MODEL="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
 1109  SD_CONCEPT_REPO="https://github.com/Sygil-Dev/sd-concepts-library/archive/refs/heads/main.zip"
 1110  if [[ -f $ENV_MODIFED_FILE ]]; then      ENV_MODIFIED_CACHED=$(<${ENV_MODIFED_FILE}); else      ENV_MODIFIED_CACHED=0; fi
 1111  # Setup the Conda env for the project. This will also handle updating the env as needed too.
 1112  conda_env_setup () {
 1113      CUSTOM_CONDA_PATH=
 1114      if [ -f custom-conda-path.txt ]; then         CUSTOM_CONDA_PATH=$(cat custom-conda-path.txt);     fi
 1115      if [ -f "$INSTALL_ENV_DIR/etc/profile.d/conda.sh" ] && [ "$CUSTOM_CONDA_PATH" == "" ]; then         . "$INSTALL_ENV_DIR/etc/profile.d/conda.sh";     fi
 1116      if [ -f "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh" ]; then         . "${CUSTOM_CONDA_PATH}/etc/profile.d/conda.sh";     elif [ -n "${CUSTOM_CONDA_PATH}" ] && [ -f "${CUSTOM_CONDA_PATH}/bin" ]; then         export PATH="${CUSTOM_CONDA_PATH}/bin:$PATH";     fi     if ! command -v conda >/dev/null; then         printf "Anaconda3 not found. Install from here https://www.anaconda.com/products/distribution\n";         exit 1;     fi
 1117      if ! conda env list | grep ".*${ENV_NAME}.*" >/dev/null 2>&1; then         printf "Could not find conda env: ${ENV_NAME} ... creating ... \n\n";         conda env create -f $ENV_FILE;         ENV_UPDATED=1;     elif [[ ! -z $CONDA_FORCE_UPDATE && $CONDA_FORCE_UPDATE == "true" ]] || (( $ENV_MODIFIED > $ENV_MODIFIED_CACHED )); then         printf "Updating conda env: ${ENV_NAME} ...\n\n";         PIP_EXISTS_ACTION=w conda env update --file $ENV_FILE --prune;         ENV_UPDATED=1;     fi
 1118      if (( $ENV_UPDATED > 0 )); then         conda clean --all;         echo -n $ENV_MODIFIED > $ENV_MODIFED_FILE;     fi; }
 1119  # Activate conda environment
 1120  conda_env_activation () {     conda activate $ENV_NAME;     conda info | grep active; }
 1121  # Checks to see if the upscaling models exist in their correct locations. If they do not they will be downloaded as required
 1122  post_processor_model_loading () {
 1123      if [ -f "$DIRECTORY/models/gfpgan/GFPGANv1.3.pth" ]; then         printf "GFPGAN already exists. Continuing...\n\n";     else         printf "Downloading GFPGAN model. Please wait...\n";         wget $GFPGAN_MODEL -P $DIRECTORY/models/gfpgan;     fi
 1124      if [ -f "$DIRECTORY/models/realesrgan/RealESRGAN_x4plus.pth" ]; then         printf "realESRGAN already exists. Continuing...\n\n";     else         printf "Downloading realESRGAN model. Please wait...\n";         wget $REALESRGAN_MODEL -P $DIRECTORY/models/realesrgan;         wget $REALESRGAN_ANIME_MODEL -P $DIRECTORY/models/realesrgan;     fi
 1125      if [ -f "$DIRECTORY/models/ldsr/model.ckpt" ]; then         printf "LDSR already exists. Continuing...\n\n";     else         printf "Cloning LDSR and downloading model. Please wait...\n";         git clone $LATENT_DIFFUSION_REPO;         mv latent-diffusion $DIRECTORY/models/ldsr;         mkdir $DIRECTORY/models/ldsr/experiments;         mkdir $DIRECTORY/models/ldsr;         wget $LSDR_CONFIG -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/project.yaml;         wget $LSDR_MODEL -P $DIRECTORY/models/ldsr;         mv $DIRECTORY/models/ldsr/index.html?dl=1 $DIRECTORY/models/ldsr/model.ckpt;     fi
 1126      if [ -d "$DIRECTORY/models/custom/sd-concepts-library" ]; then         printf "SD Concepts Library already exists. Continuing...\n\n";     else         printf "Downloading and Extracting SD Concepts Library model. Please wait...\n";         mkdir $DIRECTORY/models/custom;         wget $SD_CONCEPT_REPO;         if ! command -v unzip &> /dev/null;         then             printf "Warning: unzip could not be found. \nPlease install 'unzip' from your package manager and rerun this program.\n";             exit 1;         fi;         unzip main.zip;         mv sd-concepts-library-main/sd-concepts-library $DIRECTORY/models/custom;     fi; }
 1127  # Show the user a prompt asking them which version of the WebUI they wish to use, Streamlit or Gradio
 1128  launch_webui () {
 1129      for arg in "$@"; do         if [ "$arg" == "--bridge" ]; then            python -u scripts/relauncher.py "$@";            return;         fi;     done;     printf "\n\n########## LAUNCH USING STREAMLIT OR GRADIO? ##########\n\n";     printf "Do you wish to run the WebUI using the Gradio or StreamLit Interface?\n\n";     printf "Streamlit: \nHas A More Modern UI \nMore Features Planned \nWill Be The Main UI Going Forward \nCurrently In Active Development \n\n";     printf "Gradio: \nCurrently Feature Complete \nUses An Older Interface Style \nWill Not Receive Major Updates\n\n";     printf "Which Version of the WebUI Interface do you wish to use?\n";     select yn in "Streamlit" "Gradio"; do         case $yn in             Streamlit ) printf "\nStarting Stable Diffusion WebUI: Streamlit Interface. Please Wait...\n"; python -m streamlit run scripts/webui_streamlit.py; break;;             Gradio ) printf "\nStarting Stable Diffusion WebUI: Gradio Interface. Please Wait...\n"; python scripts/relauncher.py "$@"; break;;         esac;     done; }
 1130  # Function to initialize the other functions
 1131  start_initialization () {     conda_env_setup;     sd_model_loading;     post_processor_model_loading;     conda_env_activation;     if [ ! -e "models/ldm/stable-diffusion-v1/*.ckpt" ]; then         echo "Your model file does not exist! Streamlit will handle this automatically, however Gradio still requires this file be placed manually. If you intend to use the Gradio interface, place it in 'models/ldm/stable-diffusion-v1' with the name 'model.ckpt'.";         read -p "Once you have sd-v1-4.ckpt in the project root, if you are going to use Gradio, Press Enter...\n\n";     fi;     launch_webui "$@" }
 1132  start_initialization "$@"
 1133  #!/bin/bash -i
 1134  # Linux Stable Diffusion Script
 1135  # Version: 2.0
 1136  # MIT License
 1137  # Copyright (c) 2022 Joshua Kimsey
 1138  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
 1139  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
 1140  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
 1141  printf "\n\n\n"
 1142  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
 1143  printf "\n\n"
 1144  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
 1145  printf "\n"
 1146  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
 1147  printf "\n"
 1148  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
 1149  printf "\n\n"
 1150  DIRECTORY=./stable-diffusion-webui
 1151  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
 1152  ENV=ldm
 1153  ultimate_stable_diffusion_repo () {
 1154      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
 1155  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
 1156  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
 1157  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
 1158  # Then asks the user which mode they wish to use
 1159  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
 1160  # Function to install and run the Ultimate Stable Diffusion fork
 1161  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
 1162  # Initialization 
 1163  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
 1164  #!/bin/bash -i
 1165  # Linux Stable Diffusion Script
 1166  # Version: 2.0
 1167  # MIT License
 1168  # Copyright (c) 2022 Joshua Kimsey
 1169  ##### Please See My Guide For Running This Script Here: https://rentry.org/linux-sd #####
 1170  # Confirmed working as of September 22nd, 2022. May be subject to breakage at a later date due to bleeding-edge updates in the Stable Diffusion WebUI repo
 1171  # Please see my GitHub for updates on this script: https://github.com/JoshuaKimsey/Linux-StableDiffusion-Script
 1172  printf "\n\n\n"
 1173  printf "WELCOME TO THE ULTIMATE STABLE DIFFUSION WEB GUI ON LINUX"
 1174  printf "\n\n"
 1175  printf "The definitive Stable Diffusion experience™ Now 100% Linux Compatible!"
 1176  printf "\n"
 1177  printf "Please ensure you have Anaconda installed properly on your Linux system before running this."
 1178  printf "\n"
 1179  printf "Please refer to the original guide for more info and additional links for this project: https://rentry.org/guitard"
 1180  printf "\n\n"
 1181  DIRECTORY=./stable-diffusion-webui
 1182  REPO=https://github.com/sd-webui/stable-diffusion-webui.git
 1183  ENV=ldm
 1184  ultimate_stable_diffusion_repo () {
 1185      if [ -d "$DIRECTORY" ]; then         printf "\n\n########## CHECK FOR UPDATES ##########\n\n";         printf "Ultimate Stable Diffusion already exists. Do you want to update Ultimate Stable Diffusion?\n";         printf "(This will reset your launch arguments and they will need to be set again after updating)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Pulling updates for the Stable Diffusion WebUI. Please wait...\n"; ultimate_stable_diffusion_repo_update; break;;                 No ) printf "Stable Diffusion WebUI will not be updated. Continuing...\n"; break;;             esac;         done;     else         printf "Cloning Ultimate Stable Diffusion. Please wait...";         git clone $REPO;         cp $DIRECTORY/scripts/relauncher.py $DIRECTORY/scripts/relauncher-backup.py;     fi; }
 1186  ultimate_stable_diffusion_repo_update () {     cd $DIRECTORY;     git fetch --all;     git reset --hard origin/master;     cp ./scripts/relauncher.py ./scripts/relauncher-backup.py;     cd ..; }
 1187  linux_setup_script () {     cd $DIRECTORY;     printf "Running webui.sh...\n\n";     bash -i ./webui.sh; }
 1188  # Checks to see which mode Ultimate Stable Diffusion is running in: STANDARD or OPTIMIZED
 1189  # Then asks the user which mode they wish to use
 1190  gradio_stable_diffusion_arguments () {     if [ "$1" = "customize" ]; then         printf "Do you want extra upscaling models to be run on the CPU instead of the GPU to save on VRAM at the cost of speed?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting extra upscaling models to use the CPU...\n"; sed -i 's/extra_models_cpu = False/extra_models_cpu = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Extra upscaling models will run on the GPU. Continuing...\n"; sed -i 's/extra_models_cpu = True/extra_models_cpu = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want for Ultimate Stable Diffusion to automatically launch a new browser window or tab on first launch?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a new browser window/tab at first launch...\n"; sed -i 's/open_in_browser = False/open_in_browser = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will not open automatically in a new browser window/tab. Continuing...\n"; sed -i 's/open_in_browser = True/open_in_browser = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to run Ultimate Stable Diffusion in Optimized mode - Requires only 4GB of VRAM, but is significantly slower?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Mode...\n"; sed -i 's/optimized = False/optimized = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized = True/optimized = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to start Ultimate Stable Diffusion in Optimized Turbo mode - Requires more VRAM than regular optimized, but is faster (incompatible with Optimized Mode)?\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to run in Optimized Turbo mode...\n"; sed -i 's/optimized_turbo = False/optimized_turbo = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Ultimate Stable Diffusion will launch in Standard Mode. Continuing...\n"; sed -i 's/optimized_turbo = True/optimized_turbo = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\n";         printf "Do you want to create a public xxxxx.gradi.app URL to allow others to uses your interface? (Requires properly forwarded ports)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Setting Ultimate Stable Diffusion to open a public share URL...\n"; sed -i 's/share = False/share = True/g' $DIRECTORY/scripts/relauncher.py; break;;                 No ) printf "Setting Ultimate Stable Diffusion to not open a public share URL. Continuing...\n"; sed -i 's/share = True/share = False/g' $DIRECTORY/scripts/relauncher.py; break;;             esac;         done;         printf "\n\nCustomization of Ultimate Stable Diffusion is complete. Continuing...\n\n";     else         printf "\n\n########## GRADIO CUSTOMIZATION ##########\nPlease Note: These Arguments Only Affect The Gradio Interface Version Of The Stable Diffusion Webui.\n\n";         printf "Do you wish to customize the launch arguments for the Gradio Webui Interface?\n";         printf "(This will be where you select Optimized mode, auto open in browser, share to public, and more.)\n";         select yn in "Yes" "No"; do             case $yn in                 Yes ) printf "Starting customization of Gradio Interface launch arguments...\n"; gradio_stable_diffusion_arguments customize; break;;                 No ) printf "Maintaining current Gradio Interface launch arguments...\n"; break;;             esac;         done;     fi    ; }
 1191  # Function to install and run the Ultimate Stable Diffusion fork
 1192  ultimate_stable_diffusion () {     if [ "$1" = "initial" ]; then         ultimate_stable_diffusion_repo;         gradio_stable_diffusion_arguments;         linux_setup_script;     else         if [[ $(conda env list | grep "$ENV") = $ENV* ]]; then             printf "\n\n########## RUN PREVIOUS SETUP ##########\n\n";             printf "Do you wish to run Ultimate Stable Diffusion with the previous parameters?\n";             printf "(Select NO to customize or update your Ultimate Stable Diffusion setup)\n";             select yn in "Yes" "No"; do                 case $yn in                     Yes ) printf "Starting Ultimate Stable Diffusion using previous parameters. Please wait..."; linux_setup_script; break;;                     No ) printf "Beginning customization of Ultimate Stable Diffusion..."; ultimate_stable_diffusion initial; break;;                 esac;             done;         else             printf "ERROR: Conda Env not found. Will attempt to rebuild, please go through the update steps below...\n";             ultimate_stable_diffusion initial;         fi;     fi; }
 1193  # Initialization 
 1194  if [ ! -d "$DIRECTORY" ]; then     printf "Starting Ultimate Stable Diffusion installation...";     printf "\n";     ultimate_stable_diffusion initial; else     ultimate_stable_diffusion; fi
 1195  exit
 1196  passwd
 1197  ls
 1198  exit
 1199  passwd
 1200  exit
 1201  passwd
 1202  sudo
 1203  micro /etc/sudoers
 1204  exit
 1205  sudo micro /etc/sudoers
 1206  ls
 1207  cd ~
 1208  ls
 1209  ls -h
 1210  ls -a
 1211  groups pmarkus
 1212  cd .ssh
 1213  ls
 1214  cd repos
 1215  cd ..
 1216  ls
 1217  mkdir newtest
 1218  git clone https://github.com/markuspeitl/data-vault-collector newtest
 1219  git clone https://github.com/markuspeitl/arch-luks-btrfs
 1220  cd arch-luks-btrfs
 1221  mkdir logs
 1222  ls .git
 1223  cp -rap /home/logs/* logs
 1224  cp -rap /home/log/* logs
 1225  sudo cp -rap /home/log/* logs
 1226  ls
 1227  git add -A
 1228  ls
 1229  cd logs
 1230  ls
 1231  cat systemloader
 1232  cd systemloader/
 1233  exit
 1234  ls
 1235  cd ~
 1236  ls
 1237  ls -l
 1238  ls -l | less
 1239  cd repos
 1240  ls -l | less
 1241  cd ..
 1242  ls
 1243  cd ..
 1244  ls
 1245  cd log
 1246  ls
 1247  cd ~/arch-luks-btrfs
 1248  ls
 1249  tree
 1250  sudo tree
 1251  chown pmakurs -R logs
 1252  chown pmarkus -R logs
 1253  sudo chown pmarkus -R logs
 1254  ls
 1255  sudo cp /efi .
 1256  sudo cp -r /efi .
 1257  sudo cp -r /boot .
 1258  mkdir -p /etc
 1259  mkdir -p etc
 1260  cp /etc/fstab etc
 1261  ls
 1262  sudo chown pmarkus -R .
 1263  ls
 1264  tree
 1265  tree | less
 1266  history > history.log
 1267  rm -f boot/vmlinu*
 1268  rm -f efi/vmlinu*
 1269  rm -f boot/initram*
 1270  rm -f efi/initram*
 1271  find . -iname "*-seed" | xargs -I {} rm {}
 1272  tree
 1273  find . -path "EFI"
 1274  find . -path "*/EFI"
 1275  find . -path "*/EFI" | xargs -I{} rm -r {}
 1276  tree
 1277  find . -iname "*.img" | xargs -I {} rm {}
 1278  tree
 1279  ls
 1280  tree boot
 1281  tree efi
 1282  find . -iname "keys" | xargs -I {} rm {}
 1283  sudo tree
 1284  find . -iname "keys" | xargs -I {} rm -f {}
 1285  find . -iname "keys" | xargs -I {} rm -rf {}
 1286  tree
 1287  ls .git
 1288  git add -A
 1289  git commit -am "Add efi and boot config"
 1290  fstabc
 1291  set_sshs
 1292  pacman -S openssh
 1293  sudo pacman -S openssh
 1294  set_sshs
 1295  eval `ssh-agent`
 1296  set_sshs
 1297  gps
 1298  sudo pacman -S libsecret
 1299  set_sshs
 1300  gps
 1301  sudo pacman -S libsecret-dev
 1302  sudo pacman -S libsecret-1-0
 1303  gps
 1304  ssh github.com
 1305  git push
 1306  sshc
 1307  gps
 1308  set_sshs
 1309  killall ssh-agent
 1310  set_sshs
 1311  ssh-agent &
 1312  set_sshs
 1313  killall ssh-agent
 1314  git remote -v
 1315  eval `ssh-agent`
 1316  ssh-add ~/.ssh/markus_git_rsa
 1317  git remote -v
 1318  git remote set-url origin git@github.com:markuspeitl/arch-luks-btrfs.git
 1319  gps
 1320  sudo -i
 1321  sudo cp /etc/mkinit* etc
 1322  sudo cp -ra /etc/mkinit* etc
 1323  ls
 1324  git status
 1325  git add -A
 1326  git commit -am "Add mkinitcpio.conf and root log"
 1327  gps
 1328  md5 /efi/loader
 1329  pacman -S md5
 1330  sudo pacman -S md5
 1331  shasum /efi/loader
 1332  shasum /efi/loader/entries/arch.conf
 1333  shasum /boot/loader/entries/arch.conf
 1334  shasum /boot/loader/entries/arch.conf
 1335  sha512sum /efi/loader/entries/arch.conf
 1336  sha512sum /boot/loader/entries/arch.conf
 1337  ls /boot
 1338  sudo -i
 1339  cd ~
 1340  ls
 1341  cd arch-luks-btrfs
 1342  eval `ssh-agent`
 1343  set_sshs
 1344  ls
 1345  cp /etc/fstab etc/fstab
 1346  mkdir deprecated
 1347  mv boot deprecated/
 1348  mv efi deprecated/
 1349  ls
 1350  cp -rap /boot boot
 1351  cp -rap /efi boot
 1352  history > boot/working.log
 1353  ls
 1354  rm -rf boot
 1355  cp -rap /boot boot
 1356  cp -rap /efi efi
 1357  history > boot/working.log
